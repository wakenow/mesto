!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){},function(t,e,n){"use strict";n.r(e);n(0);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=n}var e,n,o;return e=t,(n=[{key:"enableValidation",value:function(){this._getInputList(),this._getSubmitButtonElement(),this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}},{key:"clearErrors",value:function(){var t=this;this._inputList.forEach((function(e){t._hideInputError(e)})),this._toggleSubmitButtonState(this.submitButton)}},{key:"_getInputList",value:function(){var t=Array.from(this._formElement.querySelectorAll(this._inputSelector));return this._inputList=t,this._inputList}},{key:"_getSubmitButtonElement",value:function(){var t=this._formElement.querySelector(this._submitButtonSelector);return this._buttonElement=t,this._buttonElement}},{key:"_getErrorElement",value:function(t){return this._formElement.querySelector(".popup__error_type_".concat(t.name))}},{key:"_setEventListeners",value:function(){var t=this;this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleSubmitButtonState()})),e.addEventListener("focus",(function(){t._toggleSubmitButtonState()}))}))}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}},{key:"_hideInputError",value:function(t){var e=this._getErrorElement(t);t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}},{key:"_showInputError",value:function(t,e){var n=this._getErrorElement(t);t.classList.add(this._inputErrorClass),n.classList.add(this._errorClass),n.textContent=e}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}},{key:"_hasInvalidInput",value:function(){return!!this._inputList.some((function(t){return!t.validity.valid}))}}])&&r(e.prototype,n),o&&r(e,o),t}();function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(e,n,r,o,i,u){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._likes=e.likes,this._owner=e.owner._id,this._myID=r,this._cardID=e._id,this._templateSelector=n,this._popupHandler=o,this._deleteHandler=i,this._likeHandler=u}var e,n,r;return e=t,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.cloneNode(!0)}},{key:"_setEventListeners",value:function(t){var e=this;this._removeButton=this._element.querySelector(".element__remove-button"),this._likeButton=this._element.querySelector(".element__like-button"),this._likeButton.addEventListener("click",(function(t){e._likeHandler(e._cardID,t)})),t.addEventListener("click",(function(){return e._popupHandler(e._name,e._link)}))}},{key:"renderCard",value:function(){var t=this;this._element=this._getTemplate();var e=this._element.querySelector(".element__image");return e.src=this._link,e.alt=this._name,this._setEventListeners(e),this._element.querySelector(".element__text").textContent=this._name,this._element.querySelector(".element__like-counter").textContent=this._likes.length,this._myID===this._owner?this._removeButton.addEventListener("click",(function(e){t._deleteHandler(t._cardID,e)})):this._removeButton.remove(),this._likes.some((function(e){return e._id===t._myID}))&&this._likeButton.classList.add("element__like-button_pressed"),this._element}}])&&i(e.prototype,n),r&&i(e,r),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var e,n,r;return e=t,(n=[{key:"renderItems",value:function(){var t=this;this._renderedItems.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&a(e.prototype,n),r&&a(e,r),t}();function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._modal=document.querySelector(e),this._closeButton=this._modal.querySelector(".popup__close-button"),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}var e,n,r;return e=t,(n=[{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._closeButton.addEventListener("click",this.close),this._modal.addEventListener("click",(function(e){e.target.classList.contains("popup_opened")&&t.close()}))}},{key:"open",value:function(){this._modal.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._modal.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscClose)}}])&&c(e.prototype,n),r&&c(e,r),t}();function f(t){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e,n){return(h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=v(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function m(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=v(t);if(e){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(t,e){return!e||"object"!==f(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var b=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(i,t);var e,n,r,o=m(i);function i(){return p(this,i),o.apply(this,arguments)}return e=i,(n=[{key:"open",value:function(t,e){h(v(i.prototype),"open",this).call(this);var n=this._modal.querySelector(".popup__image");n.setAttribute("src",""+e),n.alt="фото "+t,this._modal.querySelector(".popup__subtitle").textContent=t}}])&&_(e.prototype,n),r&&_(e,r),i}(l);function k(t){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function E(t,e,n){return(E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=j(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function S(t,e){return(S=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function L(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=j(t);if(e){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return C(this,n)}}function C(t,e){return!e||"object"!==k(e)&&"function"!=typeof e?w(t):e}function w(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&S(t,e)}(i,t);var e,n,r,o=L(i);function i(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this,t)).submitButton=n._modal.querySelector(".popup__submit"),n._form=n._modal.querySelector(".popup__forms"),n._submitHandler=e,n._inputList=Array.from(n._modal.querySelectorAll(".popup__form")),n._submitHandlerWithData=n._submitHandlerWithData.bind(w(n)),n}return e=i,(n=[{key:"_getInputValues",value:function(){var t={};return this._inputList.forEach((function(e){t[e.name]=e.value})),t}},{key:"_submitHandlerWithData",value:function(){this._inputValues=this._getInputValues(),this._submitHandler(this._inputValues)}},{key:"setEventListeners",value:function(){E(j(i.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this._submitHandlerWithData)}},{key:"close",value:function(){E(j(i.prototype),"close",this).call(this),this._form.reset()}}])&&g(e.prototype,n),r&&g(e,r),i}(l);function P(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var I=function(){function t(e){var n=e.nameSelector,r=e.bioSelector,o=e.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=document.querySelector(n),this._bio=document.querySelector(r),this._avatar=document.querySelector(o)}var e,n,r;return e=t,(n=[{key:"getUserInfo",value:function(){var t={};return t.name=this._name.textContent,t.bio=this._bio.textContent,t}},{key:"setUserInfo",value:function(t){var e=t.name,n=t.bio;e&&(this._name.textContent=e),n&&(this._bio.textContent=n)}},{key:"setAvatar",value:function(t){t&&(this._avatar.src=t)}}])&&P(e.prototype,n),r&&P(e,r),t}();function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var R=function(){function t(e){var n=e.userURL,r=e.cardsURL,o=e.token;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userURL=n,this._cardsURL=r,this._token=o}var e,n,r;return e=t,(n=[{key:"getUserData",value:function(){return fetch(this._userURL,{method:"GET",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка загрузки данных пользователя ".concat(t.status))}))}},{key:"getInitialCards",value:function(){return fetch(this._cardsURL,{method:"GET",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка связи с сервером ".concat(t.status))}))}},{key:"uploadUserProfileData",value:function(t,e){return fetch(this._userURL,{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:e})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка загрузки данных пользователя на сервер ".concat(t.status))}))}},{key:"addCard",value:function(t,e){return fetch(this._cardsURL,{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:e})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка загрузки карточки на сервер ".concat(t.status))}))}},{key:"deleteCard",value:function(t){var e=this._cardsURL+"/".concat(t);return fetch(e,{method:"DELETE",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка удаления карточки")}))}},{key:"likeCard",value:function(t){var e=this._cardsURL+"/likes/".concat(t);return fetch(e,{method:"PUT",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка связи с сервером")}))}},{key:"dislikeCard",value:function(t){var e=this._cardsURL+"/likes/".concat(t);return fetch(e,{method:"DELETE",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка связи с сервером")}))}},{key:"avatarUpload",value:function(t){return fetch(this._userURL+"/avatar",{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t.link})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка загрузки аватара")}))}}])&&q(e.prototype,n),r&&q(e,r),t}(),T=document.querySelector(".popup__submit_avatar"),B=document.querySelector(".popup__submit_new-element"),D=document.querySelector(".popup__submit_edit"),x=document.querySelector(".popup__message");function U(t,e){e.textContent=t?"Сохранение...":"Сохранить"}function H(t){x.textContent=t,x.parentElement.classList.add("popup_opened"),setTimeout((function(){x.textContent=""}),2e3),setTimeout((function(){x.parentElement.classList.remove("popup_opened")}),2200)}var A={formSelector:".popup__forms_type_input",inputSelector:".popup__form",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_disabled",inputErrorClass:"popup__form_type_error",errorClass:"popup__error_visible"},V=document.querySelector(".profile__profile-button"),z=document.querySelector(".profile__add-button"),M=document.querySelector(".popup_type_edit").querySelector(".popup__forms"),N=document.querySelector(".profile__avatar"),W=document.querySelector(".popup__form_type_name"),J=document.querySelector(".popup__form_type_bio"),G={},F=new I({nameSelector:".profile__name",bioSelector:".profile__subtitle",avatarSelector:".profile__avatar"}),K=new b(".popup_type_image"),Q=new O(".popup_type_edit",(function(t){var e=this;U(!0,D),$.uploadUserProfileData(t.name,t.bio).then((function(t){console.log(t),F.setUserInfo({name:t.name,bio:t.about})})).catch((function(t){H(t),console.log(t)})).finally((function(){U(!1,D),e.close()}))})),X=new O(".popup_type_new-element",(function(t){var e=this;U(!0,B),$.addCard(t.place,t.link).then((function(t){console.log(t);var e=et(t).renderCard(t);at.addItem(e)})).catch((function(t){H(t),console.log(t)})).finally((function(){U(!1,B),e.close()}))})),Y=new O(".popup_type_confirm",(function(){var t=this;$.deleteCard(Y.cardToDeleteID).then((function(t){console.log(t),Y.cardToDeleteElement.remove()})).catch((function(t){H(t),console.log(t)})).finally((function(){t.close()}))})),Z=new O(".popup_type_avatar",(function(t){var e=this;U(!0,T),console.log(t),$.avatarUpload(t).then((function(t){F.setAvatar(t.avatar)})).catch((function(t){H(t),console.log(t)})).finally((function(){U(!1,T),e.close()}))})),$=new R({userURL:"https://mesto.nomoreparties.co/v1/cohort-17/users/me",cardsURL:"https://mesto.nomoreparties.co/v1/cohort-17/cards",token:"9c5efa47-3aee-400f-b0b8-aef1a353a938"}),tt=M.querySelector(".popup__form");function et(t){return new u(t,"#place",G._id,nt,ct,lt)}function nt(t,e){K.open(t,e)}function rt(){Q.open(),ut.clearErrors();var t=F.getUserInfo();W.value=t.name,J.value=t.bio,setTimeout((function(){tt.focus()}),100)}var ot=new o(A,Z._form);ot.enableValidation();var it=new o(A,X._form);it.enableValidation();var ut=new o(A,M);ut.enableValidation();var at={},st=[$.getUserData(),$.getInitialCards()];function ct(t,e){Y.cardToDeleteID=t,Y.cardToDeleteElement=e.target.parentElement,Y.open()}function lt(t,e){e.target.classList.contains("element__like-button_pressed")?$.dislikeCard(t).then((function(t){e.target.nextElementSibling.textContent=t.likes.length,e.target.classList.remove("element__like-button_pressed")})).catch((function(t){H(t),console.log(t)})):$.likeCard(t).then((function(t){e.target.nextElementSibling.textContent=t.likes.length,e.target.classList.add("element__like-button_pressed")})).catch((function(t){H(t),console.log(t)}))}Promise.all(st).then((function(t){G=t[0];var e=t[1];F.setUserInfo({name:G.name,bio:G.about}),N.src=G.avatar,(at=new s({items:e,renderer:function(t){var e=et(t).renderCard(t);at.addItem(e)}},".elements")).renderItems(),K.setEventListeners(),Q.setEventListeners(),X.setEventListeners(),Y.setEventListeners(),Z.setEventListeners(),V.addEventListener("click",rt),z.addEventListener("click",(function(){console.log(X),X.submitButton.disabled=!0,X.submitButton.classList.add(A.inactiveButtonClass),X.open(),it.clearErrors()})),N.addEventListener("click",(function(){Z.submitButton.disabled=!0,Z.submitButton.classList.add(A.inactiveButtonClass),Z.open(),ot.clearErrors()}))})).catch((function(t){H(t),console.log(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkZvcm1WYWxpZGF0b3IiLCJ2YWxpZGF0aW9uRGF0YSIsImZvcm1FbGVtZW50IiwidGhpcyIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtRWxlbWVudCIsIl9nZXRJbnB1dExpc3QiLCJfZ2V0U3VibWl0QnV0dG9uRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9pbnB1dExpc3QiLCJmb3JFYWNoIiwiaXRlbSIsIl9oaWRlSW5wdXRFcnJvciIsIl90b2dnbGVTdWJtaXRCdXR0b25TdGF0ZSIsInN1Ym1pdEJ1dHRvbiIsImlucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b25FbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIl9idXR0b25FbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yRWxlbWVudCIsIl9nZXRFcnJvckVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0ZXh0Q29udGVudCIsImVycm9yTWVzc2FnZSIsImFkZCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzb21lIiwiQ2FyZCIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwibXlJRCIsInBvcHVwSGFuZGxlciIsImRlbGV0ZUhhbmRsZXIiLCJsaWtlSGFuZGxlciIsIl9uYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2xpa2VzIiwibGlrZXMiLCJfb3duZXIiLCJvd25lciIsIl9pZCIsIl9teUlEIiwiX2NhcmRJRCIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX3BvcHVwSGFuZGxlciIsIl9kZWxldGVIYW5kbGVyIiwiX2xpa2VIYW5kbGVyIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiY2FyZEltYWdlIiwiX3JlbW92ZUJ1dHRvbiIsIl9lbGVtZW50IiwiX2xpa2VCdXR0b24iLCJfZ2V0VGVtcGxhdGUiLCJuZXdDYXJkSW1hZ2UiLCJzcmMiLCJhbHQiLCJsZW5ndGgiLCJlbGVtIiwiU2VjdGlvbiIsInNlY3Rpb25TZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfcmVuZGVyZWRJdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJlbGVtZW50IiwicHJlcGVuZCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9tb2RhbCIsIl9jbG9zZUJ1dHRvbiIsImNsb3NlIiwiX2hhbmRsZUVzY0Nsb3NlIiwidGFyZ2V0IiwiY29udGFpbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUG9wdXBXaXRoSW1hZ2UiLCJpbWFnZSIsIlBvcHVwV2l0aEZvcm0iLCJzdWJtaXRIYW5kbGVyIiwiX2Zvcm0iLCJfc3VibWl0SGFuZGxlciIsIl9zdWJtaXRIYW5kbGVyV2l0aERhdGEiLCJpbnB1dFZhbHVlc09iaiIsIl9pbnB1dFZhbHVlcyIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc2V0IiwiVXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJiaW9TZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX2JpbyIsIl9hdmF0YXIiLCJ1c2VyRGF0YSIsImJpbyIsImF2YXRhciIsIkFwaSIsInVzZXJVUkwiLCJjYXJkc1VSTCIsInRva2VuIiwiX3VzZXJVUkwiLCJfY2FyZHNVUkwiLCJfdG9rZW4iLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJhYm91dCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaWQiLCJjYXJkRGVsZXRlVVJMIiwiY2FyZExpa2VVUkwiLCJ1cmwiLCJhdmF0YXJTdWJtaXRCdXR0b24iLCJuZXdDYXJkU3VibWl0QnV0dG9uIiwiZWRpdFN1Ym1pdEJ1dHRvbiIsIm1lc3NhZ2UiLCJyZW5kZXJMb2FkaW5nIiwiaXNMb2FkaW5nIiwiYnV0dG9uIiwic2hvd0Vycm9yTWVzc2FnZSIsInRleHQiLCJwYXJlbnRFbGVtZW50Iiwic2V0VGltZW91dCIsInZhbGlkYXRpb25Db25maWciLCJmb3JtU2VsZWN0b3IiLCJlZGl0QnV0dG9uIiwiYWRkQnV0dG9uIiwicG9wdXBFZGl0Q29udGFpbmVyIiwidXNlckF2YXRhciIsIm5hbWVJbnB1dCIsImJpb0lucHV0IiwidXNlckNvbmZpZyIsImltYWdlUG9wdXAiLCJlZGl0TW9kYWwiLCJhcGkiLCJ1cGxvYWRVc2VyUHJvZmlsZURhdGEiLCJjb25zb2xlIiwibG9nIiwic2V0VXNlckluZm8iLCJjYXRjaCIsImVyciIsImZpbmFsbHkiLCJuZXdDYXJkTW9kYWwiLCJhZGRDYXJkIiwicGxhY2UiLCJjYXJkRWxlbWVudCIsImNyZWF0ZUNhcmQiLCJyZW5kZXJDYXJkIiwiY2FyZHNHcmlkIiwiYWRkSXRlbSIsImNvbmZpcm1Nb2RhbCIsImRlbGV0ZUNhcmQiLCJjYXJkVG9EZWxldGVJRCIsImNhcmRUb0RlbGV0ZUVsZW1lbnQiLCJhdmF0YXJNb2RhbCIsImF2YXRhclVwbG9hZCIsInNldEF2YXRhciIsInBvcHVwRm9ybVNlbGVjdG9yIiwiaGFuZGxlUHJldmlld1BpY3R1cmUiLCJkZWxldGVDYXJkSGFuZGxlciIsIm9wZW4iLCJvcGVuRWRpdFByb2ZpbGVNb2RhbCIsImZvcm1OZXdDYXJkU3VibWl0VmFsaWRhdG9yIiwiY2xlYXJFcnJvcnMiLCJnZXRVc2VySW5mbyIsImZvY3VzIiwiZm9ybUF2YXRhclN1Ym1pdFZhbGlkYXRvciIsImVuYWJsZVZhbGlkYXRpb24iLCJmb3JtRWRpdFN1Ym1pdFZhbGlkYXRvciIsImRhdGFEb3dubG9hZCIsImdldFVzZXJEYXRhIiwiZ2V0SW5pdGlhbENhcmRzIiwiZGlzbGlrZUNhcmQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJsaWtlQ2FyZCIsImFsbCIsImNhcmRzRGF0YSIsInJlbmRlckl0ZW1zIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJkaXNhYmxlZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRyx1T0NsRmhDQyxFLFdBQ2pCLFdBQVlDLEVBQWdCQyxJLDRGQUFhLFNBQ3JDQyxLQUFLQyxlQUFpQkgsRUFBZUksY0FDckNGLEtBQUtHLHNCQUF3QkwsRUFBZU0scUJBQzVDSixLQUFLSyxxQkFBdUJQLEVBQWVRLG9CQUMzQ04sS0FBS08saUJBQW1CVCxFQUFlVSxnQkFDdkNSLEtBQUtTLFlBQWNYLEVBQWVZLFdBQ2xDVixLQUFLVyxhQUFlWixFLGtFQUlwQkMsS0FBS1ksZ0JBQ0xaLEtBQUthLDBCQUNMYixLQUFLVyxhQUFhRyxpQkFBaUIsVUFBVSxTQUFDQyxHQUFVQSxFQUFJQyxvQkFDNURoQixLQUFLaUIsdUIsb0NBR0ssV0FDVmpCLEtBQUtrQixXQUFXQyxTQUFRLFNBQUNDLEdBQVcsRUFBS0MsZ0JBQWdCRCxNQUN6RHBCLEtBQUtzQix5QkFBeUJ0QixLQUFLdUIsZ0Isc0NBSW5DLElBQU1DLEVBQVlDLE1BQU1DLEtBQUsxQixLQUFLVyxhQUFhZ0IsaUJBQWlCM0IsS0FBS0MsaUJBRXJFLE9BREFELEtBQUtrQixXQUFhTSxFQUNYeEIsS0FBS2tCLGEsZ0RBR1osSUFBTVUsRUFBZ0I1QixLQUFLVyxhQUFha0IsY0FBYzdCLEtBQUtHLHVCQUUzRCxPQURBSCxLQUFLOEIsZUFBaUJGLEVBQ2Y1QixLQUFLOEIsaUIsdUNBR0NDLEdBRWIsT0FEcUIvQixLQUFLVyxhQUFha0IsY0FBbEIsNkJBQXNERSxFQUFhM0QsUywyQ0FJdkUsV0FDakI0QixLQUFLa0IsV0FBV0MsU0FBUSxTQUFDQyxHQUNyQkEsRUFBS04saUJBQWlCLFNBQVMsV0FDM0IsRUFBS2tCLG9CQUFvQlosR0FDekIsRUFBS0UsOEJBRVRGLEVBQUtOLGlCQUFpQixTQUFTLFdBQzNCLEVBQUtRLG1DLDBDQUtHUyxHQUNaQSxFQUFhRSxTQUFTQyxNQUN0QmxDLEtBQUtxQixnQkFBZ0JVLEdBRXJCL0IsS0FBS21DLGdCQUFnQkosRUFBY0EsRUFBYUsscUIsc0NBSXhDTCxHQUNaLElBQU1NLEVBQWVyQyxLQUFLc0MsaUJBQWlCUCxHQUMzQ0EsRUFBYVEsVUFBVUMsT0FBT3hDLEtBQUtPLGtCQUNuQzhCLEVBQWFFLFVBQVVDLE9BQU94QyxLQUFLUyxhQUNuQzRCLEVBQWFJLFlBQWMsSyxzQ0FHZlYsRUFBY1csR0FDMUIsSUFBTUwsRUFBZXJDLEtBQUtzQyxpQkFBaUJQLEdBQzNDQSxFQUFhUSxVQUFVSSxJQUFJM0MsS0FBS08sa0JBQ2hDOEIsRUFBYUUsVUFBVUksSUFBSTNDLEtBQUtTLGFBQ2hDNEIsRUFBYUksWUFBY0MsSSxpREFJdkIxQyxLQUFLNEMsaUJBQWlCNUMsS0FBS2tCLGFBQzNCbEIsS0FBSzhCLGVBQWVTLFVBQVVJLElBQUkzQyxLQUFLSyxzQkFDdkNMLEtBQUs4QixlQUFlZSxhQUFhLFlBQVksS0FFN0M3QyxLQUFLOEIsZUFBZVMsVUFBVUMsT0FBT3hDLEtBQUtLLHNCQUMxQ0wsS0FBSzhCLGVBQWVnQixnQkFBZ0IsZSx5Q0FLeEMsUUFBSTlDLEtBQUtrQixXQUFXNkIsTUFBSyxTQUFBM0IsR0FBSSxPQUFLQSxFQUFLYSxTQUFTQyxjLDBNQ25GbkNjLEUsV0FDakIsV0FBWUMsRUFBTUMsRUFBa0JDLEVBQU1DLEVBQWNDLEVBQWVDLEksNEZBQWEsU0FDaEZ0RCxLQUFLdUQsTUFBUU4sRUFBSzdFLEtBQ2xCNEIsS0FBS3dELE1BQVFQLEVBQUtRLEtBQ2xCekQsS0FBSzBELE9BQVNULEVBQUtVLE1BQ25CM0QsS0FBSzRELE9BQVNYLEVBQUtZLE1BQU1DLElBQ3pCOUQsS0FBSytELE1BQVFaLEVBQ2JuRCxLQUFLZ0UsUUFBVWYsRUFBS2EsSUFDcEI5RCxLQUFLaUUsa0JBQW9CZixFQUN6QmxELEtBQUtrRSxjQUFnQmQsRUFDckJwRCxLQUFLbUUsZUFBaUJkLEVBQ3RCckQsS0FBS29FLGFBQWVkLEUsOERBUXBCLE9BSm9CZSxTQUNmeEMsY0FBYzdCLEtBQUtpRSxtQkFDbkJLLFFBQ0FDLFdBQVUsSyx5Q0FJQUMsR0FBVyxXQUN0QnhFLEtBQUt5RSxjQUFnQnpFLEtBQUswRSxTQUFTN0MsY0FBYywyQkFDakQ3QixLQUFLMkUsWUFBYzNFLEtBQUswRSxTQUFTN0MsY0FBYyx5QkFDL0M3QixLQUFLMkUsWUFBWTdELGlCQUFpQixTQUFTLFNBQUNDLEdBQ3hDLEVBQUtxRCxhQUFhLEVBQUtKLFFBQVNqRCxNQUVwQ3lELEVBQVUxRCxpQkFBaUIsU0FBUyxrQkFBTSxFQUFLb0QsY0FBYyxFQUFLWCxNQUFPLEVBQUtDLFksbUNBR3pFLFdBQ1R4RCxLQUFLMEUsU0FBVzFFLEtBQUs0RSxlQUNyQixJQUFNQyxFQUFlN0UsS0FBSzBFLFNBQVM3QyxjQUFjLG1CQW1CakQsT0FsQkFnRCxFQUFhQyxJQUFNOUUsS0FBS3dELE1BQ3hCcUIsRUFBYUUsSUFBTS9FLEtBQUt1RCxNQUN4QnZELEtBQUtpQixtQkFBbUI0RCxHQUN4QjdFLEtBQUswRSxTQUFTN0MsY0FBYyxrQkFBa0JZLFlBQWN6QyxLQUFLdUQsTUFDakV2RCxLQUFLMEUsU0FBUzdDLGNBQWMsMEJBQTBCWSxZQUFjekMsS0FBSzBELE9BQU9zQixPQUM1RWhGLEtBQUsrRCxRQUFVL0QsS0FBSzRELE9BQ3BCNUQsS0FBS3lFLGNBQWMzRCxpQkFBaUIsU0FBUyxTQUFDQyxHQUMxQyxFQUFLb0QsZUFBZSxFQUFLSCxRQUFTakQsTUFHdENmLEtBQUt5RSxjQUFjakMsU0FJbEJ4QyxLQUFLMEQsT0FBT1gsTUFBSyxTQUFBa0MsR0FBSSxPQUFJQSxFQUFLbkIsTUFBUSxFQUFLQyxVQUM1Qy9ELEtBQUsyRSxZQUFZcEMsVUFBVUksSUFBSSxnQ0FHNUIzQyxLQUFLMEUsYywwTUNwRENRLEUsV0FDakIsYUFBaUNDLEdBQWlCLElBQXBDQyxFQUFvQyxFQUFwQ0EsTUFBT0MsRUFBNkIsRUFBN0JBLFUsNEZBQTZCLFNBQzFDckYsS0FBS3NGLGVBQWlCRixFQUN0QnBGLEtBQUt1RixVQUFZRixFQUNqQnJGLEtBQUt3RixXQUFhbkIsU0FBU3hDLGNBQWNzRCxHLDZEQUduQyxXQUNObkYsS0FBS3NGLGVBQWVuRSxTQUFRLFNBQUFDLEdBQ3hCLEVBQUttRSxVQUFVbkUsUSw4QkFJbkJxRSxHQUNBekYsS0FBS3dGLFdBQVdFLFFBQVFELFEsME1DZGZFLEUsV0FDakIsV0FBWUMsSSw0RkFBZSxTQUN2QjVGLEtBQUs2RixPQUFTeEIsU0FBU3hDLGNBQWMrRCxHQUNyQzVGLEtBQUs4RixhQUFlOUYsS0FBSzZGLE9BQU9oRSxjQUFjLHdCQUM5QzdCLEtBQUsrRixNQUFRL0YsS0FBSytGLE1BQU0xRyxLQUFLVyxNQUM3QkEsS0FBS2dHLGdCQUFrQmhHLEtBQUtnRyxnQkFBZ0IzRyxLQUFLVyxNLCtEQUdyQ2UsR0FDSSxXQUFaQSxFQUFJM0IsS0FDSlksS0FBSytGLFUsMENBSU8sV0FDaEIvRixLQUFLOEYsYUFBYWhGLGlCQUFpQixRQUFTZCxLQUFLK0YsT0FDakQvRixLQUFLNkYsT0FBTy9FLGlCQUFpQixTQUFTLFNBQUNDLEdBQy9CQSxFQUFJa0YsT0FBTzFELFVBQVUyRCxTQUFTLGlCQUM5QixFQUFLSCxhLDZCQU1iL0YsS0FBSzZGLE9BQU90RCxVQUFVSSxJQUFJLGdCQUMxQjBCLFNBQVN2RCxpQkFBaUIsUUFBU2QsS0FBS2dHLG1CLDhCQUl4Q2hHLEtBQUs2RixPQUFPdEQsVUFBVUMsT0FBTyxnQkFDN0I2QixTQUFTOEIsb0JBQW9CLFFBQVNuRyxLQUFLZ0csc0Isa25EQzdCOUJJLEUsc1dBRVpoSSxFQUFNcUYsR0FDUCx5Q0FDQSxJQUFNNEMsRUFBUXJHLEtBQUs2RixPQUFPaEUsY0FBYyxpQkFDeEN3RSxFQUFNeEQsYUFBYSxNQUFPLEdBQUtZLEdBQy9CNEMsRUFBTXRCLElBQU0sUUFBVTNHLEVBQ3RCNEIsS0FBSzZGLE9BQU9oRSxjQUFjLG9CQUFvQlksWUFBY3JFLE8sOEJBUHhCdUgsRyx1L0NDQXZCVyxFLHNRQUNqQixXQUFZVixFQUFlVyxHQUFlLGEsNEZBQUEsVUFDdEMsY0FBTVgsSUFDRHJFLGFBQWUsRUFBS3NFLE9BQU9oRSxjQUFjLGtCQUM5QyxFQUFLMkUsTUFBUSxFQUFLWCxPQUFPaEUsY0FBYyxpQkFDdkMsRUFBSzRFLGVBQWlCRixFQUN0QixFQUFLckYsV0FBYU8sTUFBTUMsS0FBSyxFQUFLbUUsT0FBT2xFLGlCQUFpQixpQkFDMUQsRUFBSytFLHVCQUF5QixFQUFLQSx1QkFBdUJySCxLQUE1QixNQU5RLEUsdURBVXRDLElBQU1zSCxFQUFpQixHQUl2QixPQUhBM0csS0FBS2tCLFdBQVdDLFNBQVEsU0FBQUMsR0FDcEJ1RixFQUFldkYsRUFBS2hELE1BQVFnRCxFQUFLdEMsU0FFOUI2SCxJLCtDQUlQM0csS0FBSzRHLGFBQWU1RyxLQUFLNkcsa0JBQ3pCN0csS0FBS3lHLGVBQWV6RyxLQUFLNEcsZ0IsMENBR3pCLHNEQUNBNUcsS0FBS3dHLE1BQU0xRixpQkFBaUIsU0FBVWQsS0FBSzBHLDBCLDhCQUszQywwQ0FDQTFHLEtBQUt3RyxNQUFNTSxhLDhCQTlCd0JuQixHLDBLQ0R0Qm9CLEUsV0FDakIsY0FBMkQsSUFBN0NDLEVBQTZDLEVBQTdDQSxhQUFjQyxFQUErQixFQUEvQkEsWUFBYUMsRUFBa0IsRUFBbEJBLGdCLDRGQUFrQixTQUN2RGxILEtBQUt1RCxNQUFRYyxTQUFTeEMsY0FBY21GLEdBQ3BDaEgsS0FBS21ILEtBQU85QyxTQUFTeEMsY0FBY29GLEdBQ25DakgsS0FBS29ILFFBQVUvQyxTQUFTeEMsY0FBY3FGLEcsNkRBS3RDLElBQU1HLEVBQVcsR0FHakIsT0FGQUEsRUFBU2pKLEtBQU80QixLQUFLdUQsTUFBTWQsWUFDM0I0RSxFQUFTQyxJQUFNdEgsS0FBS21ILEtBQUsxRSxZQUNsQjRFLEkscUNBRWdCLElBQWJqSixFQUFhLEVBQWJBLEtBQU1rSixFQUFPLEVBQVBBLElBQ1psSixJQUNKNEIsS0FBS3VELE1BQU1kLFlBQWNyRSxHQUVyQmtKLElBQ0p0SCxLQUFLbUgsS0FBSzFFLFlBQWM2RSxLLGdDQUdsQkMsR0FDRkEsSUFDSnZILEtBQUtvSCxRQUFRdEMsSUFBTXlDLFEsME1DeEJOQyxFLFdBQ2pCLGNBQTBDLElBQTVCQyxFQUE0QixFQUE1QkEsUUFBU0MsRUFBbUIsRUFBbkJBLFNBQVVDLEVBQVMsRUFBVEEsTyw0RkFBUyxTQUN0QzNILEtBQUs0SCxTQUFXSCxFQUNoQnpILEtBQUs2SCxVQUFZSCxFQUNqQjFILEtBQUs4SCxPQUFTSCxFLDZEQUdkLE9BQU9JLE1BQU0vSCxLQUFLNEgsU0FBVSxDQUNwQkksT0FBUSxNQUNSQyxRQUFTLENBQ0xDLGNBQWVsSSxLQUFLOEgsVUFHM0JLLE1BQUssU0FBQ0MsR0FDSCxPQUFJQSxFQUFJQyxHQUNHRCxFQUFJRSxPQUVKQyxRQUFRQyxPQUFSLDhDQUFzREosRUFBSUssYyx3Q0FXN0UsT0FBT1YsTUFBTS9ILEtBQUs2SCxVQUFXLENBQ3JCRyxPQUFRLE1BQ1JDLFFBQVMsQ0FDTEMsY0FBZWxJLEtBQUs4SCxVQUczQkssTUFBSyxTQUFBQyxHQUNGLE9BQUlBLEVBQUlDLEdBQ0dELEVBQUlFLE9BRUpDLFFBQVFDLE9BQVIsa0NBQTBDSixFQUFJSyxjLDRDQU0vQ3JLLEVBQU1zSyxHQUN4QixPQUFPWCxNQUFNL0gsS0FBSzRILFNBQVUsQ0FDcEJJLE9BQVEsUUFDUkMsUUFBUyxDQUNMQyxjQUFlbEksS0FBSzhILE9BQ3BCLGVBQWdCLG9CQUVwQmEsS0FBTUMsS0FBS0MsVUFBVSxDQUNqQnpLLEtBQU1BLEVBQ05zSyxNQUFPQSxNQUdkUCxNQUFLLFNBQUFDLEdBQ0YsT0FBSUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFSkMsUUFBUUMsT0FBUix3REFBZ0VKLEVBQUlLLGMsOEJBSW5GckssRUFBTXFGLEdBQ1YsT0FBT3NFLE1BQU0vSCxLQUFLNkgsVUFBVyxDQUNyQkcsT0FBUSxPQUNSQyxRQUFTLENBQ0xDLGNBQWVsSSxLQUFLOEgsT0FDcEIsZUFBZ0Isb0JBRXBCYSxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCekssS0FBTUEsRUFDTnFGLEtBQU1BLE1BR2IwRSxNQUFLLFNBQUFDLEdBQ0YsT0FBSUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFSkMsUUFBUUMsT0FBUiw2Q0FBcURKLEVBQUlLLGMsaUNBS3JFSyxHQUNQLElBQU1DLEVBQWlCL0ksS0FBSzZILFVBQUwsV0FBcUJpQixHQUM1QyxPQUFPZixNQUFNZ0IsRUFBZSxDQUNwQmYsT0FBUSxTQUNSQyxRQUFTLENBQ0xDLGNBQWVsSSxLQUFLOEgsVUFHM0JLLE1BQUssU0FBQUMsR0FDRixPQUFJQSxFQUFJQyxHQUNHRCxFQUFJRSxPQUVKQyxRQUFRQyxPQUFPLGlDLCtCQUk3Qk0sR0FDTCxJQUFNRSxFQUFlaEosS0FBSzZILFVBQUwsaUJBQTJCaUIsR0FDaEQsT0FBT2YsTUFBTWlCLEVBQWEsQ0FDbEJoQixPQUFRLE1BQ1JDLFFBQVMsQ0FDTEMsY0FBZWxJLEtBQUs4SCxVQUczQkssTUFBSyxTQUFBQyxHQUNGLE9BQUlBLEVBQUlDLEdBQ0dELEVBQUlFLE9BRUpDLFFBQVFDLE9BQU8sZ0Msa0NBSzFCTSxHQUNSLElBQU1FLEVBQWVoSixLQUFLNkgsVUFBTCxpQkFBMkJpQixHQUNoRCxPQUFPZixNQUFNaUIsRUFBYSxDQUNsQmhCLE9BQVEsU0FDUkMsUUFBUyxDQUNMQyxjQUFlbEksS0FBSzhILFVBRzNCSyxNQUFLLFNBQUFDLEdBQ0YsT0FBSUEsRUFBSUMsR0FDR0QsRUFBSUUsT0FFSkMsUUFBUUMsT0FBTyxnQyxtQ0FJekJTLEdBQ1QsT0FBT2xCLE1BQU8vSCxLQUFLNEgsU0FBTCxVQUE0QixDQUNsQ0ksT0FBUSxRQUNSQyxRQUFTLENBQ0xDLGNBQWVsSSxLQUFLOEgsT0FDcEIsZUFBZ0Isb0JBRXBCYSxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCdEIsT0FBUTBCLEVBQUl4RixTQUduQjBFLE1BQUssU0FBQUMsR0FDRixPQUFJQSxFQUFJQyxHQUNHRCxFQUFJRSxPQUVKQyxRQUFRQyxPQUFPLG1DLGdDQ3JKN0JVLEVBQXFCN0UsU0FBU3hDLGNBQWMseUJBQzVDc0gsRUFBc0I5RSxTQUFTeEMsY0FBYyw4QkFDN0N1SCxFQUFtQi9FLFNBQVN4QyxjQUFjLHVCQUNqRHdILEVBQVVoRixTQUFTeEMsY0FBYyxtQkFFdkMsU0FBU3lILEVBQWNDLEVBQVdDLEdBRTFCQSxFQUFPL0csWUFEUjhHLEVBQ3NCLGdCQUVBLFlBSzdCLFNBQVNFLEVBQWlCQyxHQUN0QkwsRUFBUTVHLFlBQWNpSCxFQUN0QkwsRUFBUU0sY0FBY3BILFVBQVVJLElBQUksZ0JBQ3BDaUgsWUFBVyxXQUNQUCxFQUFRNUcsWUFBYyxLQUN2QixLQUNIbUgsWUFBVyxXQUNQUCxFQUFRTSxjQUFjcEgsVUFBVUMsT0FBTyxrQkFDeEMsTUNYUCxJQUFNcUgsRUFBbUIsQ0FDckJDLGFBQWMsMkJBQ2Q1SixjQUFlLGVBQ2ZFLHFCQUFzQixpQkFDdEJFLG9CQUFxQix5QkFDckJFLGdCQUFpQix5QkFDakJFLFdBQVksd0JBR1ZxSixFQUFhMUYsU0FBU3hDLGNBQWMsNEJBQ3BDbUksRUFBWTNGLFNBQVN4QyxjQUFjLHdCQUVuQ29JLEVBRFk1RixTQUFTeEMsY0FBYyxvQkFDSkEsY0FBYyxpQkFDN0NxSSxFQUFhN0YsU0FBU3hDLGNBQWMsb0JBRXBDc0ksRUFBWTlGLFNBQVN4QyxjQUFjLDBCQUNuQ3VJLEVBQVcvRixTQUFTeEMsY0FBYyx5QkFDcEN3RixFQUFXLEdBUVRnRCxFQUFhLElBQUl0RCxFQUFVLENBQzdCQyxhQUFjLGlCQUNkQyxZQUFhLHFCQUNiQyxlQUFnQixxQkFHZG9ELEVBQWEsSUFBSWxFLEVBQWUscUJBQ2hDbUUsRUFBWSxJQUFJakUsRUFBYyxvQkFrSnBDLFNBQStCckQsR0FBTSxXQUNqQ3FHLEdBQWMsRUFBTUYsR0FDcEJvQixFQUFJQyxzQkFBc0J4SCxFQUFLN0UsS0FBTTZFLEVBQUtxRSxLQUNyQ2EsTUFBSyxTQUFDQyxHQUNIc0MsUUFBUUMsSUFBSXZDLEdBQ1ppQyxFQUFXTyxZQUFZLENBQUV4TSxLQUFNZ0ssRUFBSWhLLEtBQU1rSixJQUFLYyxFQUFJTSxXQUVyRG1DLE9BQU0sU0FBQ0MsR0FDSnJCLEVBQWlCcUIsR0FDakJKLFFBQVFDLElBQUlHLE1BRWZDLFNBQVEsV0FDTHpCLEdBQWMsRUFBT0YsR0FDckIsRUFBS3JELGNBOUpYaUYsRUFBZSxJQUFJMUUsRUFBYywyQkFrS3ZDLFNBQWtDckQsR0FBTSxXQUNwQ3FHLEdBQWMsRUFBTUgsR0FDcEJxQixFQUFJUyxRQUFRaEksRUFBS2lJLE1BQU9qSSxFQUFLUSxNQUN4QjBFLE1BQUssU0FBQ0MsR0FDSHNDLFFBQVFDLElBQUl2QyxHQUNaLElBQU0rQyxFQUFjQyxHQUFXaEQsR0FBS2lELFdBQVdqRCxHQUMvQ2tELEdBQVVDLFFBQVFKLE1BRXJCTixPQUFNLFNBQUNDLEdBQ0pyQixFQUFpQnFCLEdBQ2pCSixRQUFRQyxJQUFJRyxNQUVmQyxTQUFRLFdBQ0x6QixHQUFjLEVBQU9ILEdBQ3JCLEVBQUtwRCxjQS9LWHlGLEVBQWUsSUFBSWxGLEVBQWMsdUJBdUd2QyxXQUFvQyxXQUNoQ2tFLEVBQUlpQixXQUFXRCxFQUFhRSxnQkFDdkJ2RCxNQUFLLFNBQUFDLEdBQ0ZzQyxRQUFRQyxJQUFJdkMsR0FDWm9ELEVBQWFHLG9CQUFvQm5KLFlBRXBDcUksT0FBTSxTQUFBQyxHQUNIckIsRUFBaUJxQixHQUNqQkosUUFBUUMsSUFBSUcsTUFFZkMsU0FBUSxXQUNMLEVBQUtoRixjQWpIWDZGLEVBQWMsSUFBSXRGLEVBQWMsc0JBOEV0QyxTQUFpQ3JELEdBQU0sV0FDbkNxRyxHQUFjLEVBQU1KLEdBQ3BCd0IsUUFBUUMsSUFBSTFILEdBQ1p1SCxFQUFJcUIsYUFBYTVJLEdBQ1prRixNQUFLLFNBQUNDLEdBQ0hpQyxFQUFXeUIsVUFBVTFELEVBQUliLFdBRTVCc0QsT0FBTSxTQUFBQyxHQUNIckIsRUFBaUJxQixHQUNqQkosUUFBUUMsSUFBSUcsTUFFZkMsU0FBUSxXQUNMekIsR0FBYyxFQUFPSixHQUNyQixFQUFLbkQsY0ExRlh5RSxFQUFNLElBQUloRCxFQWpCRSxDQUNkQyxRQUFTLHVEQUNUQyxTQUFVLG9EQUNWQyxNQUFPLHlDQWVMb0UsR0FBb0I5QixFQUFtQnBJLGNBQWMsZ0JBRzNELFNBQVN1SixHQUFXaEssR0FFaEIsT0FEYSxJQUFJNEIsRUFBSzVCLEVBSFosU0FHeUJpRyxFQUFTdkQsSUFBS2tJLEdBQXNCQyxHQUFtQjNJLElBSTlGLFNBQVMwSSxHQUFxQjVOLEVBQU1xRixHQUNoQzZHLEVBQVc0QixLQUFLOU4sRUFBTXFGLEdBRzFCLFNBQVMwSSxLQUNMNUIsRUFBVTJCLE9BQ1ZFLEdBQTJCQyxjQUMzQixJQUFNaEYsRUFBV2dELEVBQVdpQyxjQUM1Qm5DLEVBQVVyTCxNQUFRdUksRUFBU2pKLEtBQzNCZ00sRUFBU3RMLE1BQVF1SSxFQUFTQyxJQUMxQnNDLFlBQVcsV0FDUG1DLEdBQWtCUSxVQUNuQixLQUdQLElBQU1DLEdBQTRCLElBQUkzTSxFQUFjZ0ssRUFBa0IrQixFQUFZcEYsT0FDbEZnRyxHQUEwQkMsbUJBQzFCLElBQU1DLEdBQTBCLElBQUk3TSxFQUFjZ0ssRUFBa0JtQixFQUFheEUsT0FDakZrRyxHQUF3QkQsbUJBQ3hCLElBQU1MLEdBQTZCLElBQUl2TSxFQUFjZ0ssRUFBa0JJLEdBQ3ZFbUMsR0FBMkJLLG1CQUUzQixJQUFJbkIsR0FBWSxHQUlWcUIsR0FBZSxDQUhFbkMsRUFBSW9DLGNBQ0hwQyxFQUFJcUMsbUJBOEQ1QixTQUFTWixHQUFrQm5ELEVBQUkvSCxHQUMzQnlLLEVBQWFFLGVBQWlCNUMsRUFDOUIwQyxFQUFhRyxvQkFBc0I1SyxFQUFJa0YsT0FBTzBELGNBQzlDNkIsRUFBYVUsT0FvQmpCLFNBQVM1SSxHQUFZd0YsRUFBSS9ILEdBQ2pCQSxFQUFJa0YsT0FBTzFELFVBQVUyRCxTQUFTLGdDQUM5QnNFLEVBQUlzQyxZQUFZaEUsR0FDWFgsTUFBSyxTQUFDQyxHQUNIckgsRUFBSWtGLE9BQU84RyxtQkFBbUJ0SyxZQUFjMkYsRUFBSXpFLE1BQU1xQixPQUN0RGpFLEVBQUlrRixPQUFPMUQsVUFBVUMsT0FBTyxtQ0FFL0JxSSxPQUFNLFNBQUNDLEdBQ0pyQixFQUFpQnFCLEdBQ2pCSixRQUFRQyxJQUFJRyxNQUdwQk4sRUFBSXdDLFNBQVNsRSxHQUNSWCxNQUFLLFNBQUNDLEdBQ0hySCxFQUFJa0YsT0FBTzhHLG1CQUFtQnRLLFlBQWMyRixFQUFJekUsTUFBTXFCLE9BQ3REakUsRUFBSWtGLE9BQU8xRCxVQUFVSSxJQUFJLG1DQUU1QmtJLE9BQU0sU0FBQ0MsR0FDSnJCLEVBQWlCcUIsR0FDakJKLFFBQVFDLElBQUlHLE1Bckc1QnZDLFFBQVEwRSxJQUFJTixJQUNQeEUsTUFBSyxTQUFDbEYsR0FDSG9FLEVBQVdwRSxFQUFLLEdBQ2hCLElBQU1pSyxFQUFZakssRUFBSyxHQUN2Qm9ILEVBQVdPLFlBQVksQ0FBRSxLQUFRdkQsRUFBU2pKLEtBQU0sSUFBT2lKLEVBQVNxQixRQUNoRXdCLEVBQVdwRixJQUFNdUMsRUFBU0UsUUFDMUIrRCxHQUFZLElBQUlwRyxFQUFRLENBQ3BCRSxNQUFPOEgsRUFDUDdILFNBQVUsU0FBQ2pFLEdBQ1AsSUFBTStKLEVBQWNDLEdBQVdoSyxHQUFNaUssV0FBV2pLLEdBQ2hEa0ssR0FBVUMsUUFBUUosS0FFdkIsY0FDT2dDLGNBRVY3QyxFQUFXOEMsb0JBQ1g3QyxFQUFVNkMsb0JBQ1ZwQyxFQUFhb0Msb0JBQ2I1QixFQUFhNEIsb0JBQ2J4QixFQUFZd0Isb0JBRVpyRCxFQUFXakosaUJBQWlCLFFBQVNxTCxJQUNyQ25DLEVBQVVsSixpQkFBaUIsU0FBUyxXQUNoQzRKLFFBQVFDLElBQUlLLEdBQ1pBLEVBQWF6SixhQUFhOEwsVUFBVyxFQUNyQ3JDLEVBQWF6SixhQUFhZ0IsVUFBVUksSUFBSWtILEVBQWlCdkoscUJBQ3pEMEssRUFBYWtCLE9BQ2JRLEdBQXdCTCxpQkFFNUJuQyxFQUFXcEosaUJBQWlCLFNBQVMsV0FDakM4SyxFQUFZckssYUFBYThMLFVBQVcsRUFDcEN6QixFQUFZckssYUFBYWdCLFVBQVVJLElBQUlrSCxFQUFpQnZKLHFCQUN4RHNMLEVBQVlNLE9BQ1pNLEdBQTBCSCxvQkFHakN4QixPQUFNLFNBQUNDLEdBQ0pyQixFQUFpQnFCLEdBQ2pCSixRQUFRQyxJQUFJRyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3IodmFsaWRhdGlvbkRhdGEsIGZvcm1FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSB2YWxpZGF0aW9uRGF0YS5pbnB1dFNlbGVjdG9yO1xuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHZhbGlkYXRpb25EYXRhLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xuICAgICAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdmFsaWRhdGlvbkRhdGEuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICAgICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gdmFsaWRhdGlvbkRhdGEuaW5wdXRFcnJvckNsYXNzO1xuICAgICAgICB0aGlzLl9lcnJvckNsYXNzID0gdmFsaWRhdGlvbkRhdGEuZXJyb3JDbGFzcztcbiAgICAgICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcbiAgICB9XG5cbiAgICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9nZXRJbnB1dExpc3QoKTtcbiAgICAgICAgdGhpcy5fZ2V0U3VibWl0QnV0dG9uRWxlbWVudCgpO1xuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7IGV2dC5wcmV2ZW50RGVmYXVsdCgpIH0pO1xuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaXRlbSkgPT4geyB0aGlzLl9oaWRlSW5wdXRFcnJvcihpdGVtKTsgfSk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKHRoaXMuc3VibWl0QnV0dG9uKTtcbiAgICB9XG5cbiAgICBfZ2V0SW5wdXRMaXN0KCkge1xuICAgICAgICBjb25zdCBpbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcikpO1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSBpbnB1dExpc3Q7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Q7XG4gICAgfVxuICAgIF9nZXRTdWJtaXRCdXR0b25FbGVtZW50KCkge1xuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSBidXR0b25FbGVtZW50O1xuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uRWxlbWVudDtcbiAgICB9XG5cbiAgICBfZ2V0RXJyb3JFbGVtZW50KGlucHV0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAucG9wdXBfX2Vycm9yX3R5cGVfJHtpbnB1dEVsZW1lbnQubmFtZX1gKTtcbiAgICAgICAgcmV0dXJuIGVycm9yRWxlbWVudDtcbiAgICB9XG5cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpdGVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVTdWJtaXRCdXR0b25TdGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZ2V0RXJyb3JFbGVtZW50KGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG5cbiAgICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZ2V0RXJyb3JFbGVtZW50KGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XG4gICAgfVxuXG4gICAgX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0TGlzdCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaGFzSW52YWxpZElucHV0KCkge1xuICAgICAgICBpZiAodGhpcy5faW5wdXRMaXN0LnNvbWUoaXRlbSA9PiAhaXRlbS52YWxpZGl0eS52YWxpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgdGVtcGxhdGVTZWxlY3RvciwgbXlJRCwgcG9wdXBIYW5kbGVyLCBkZWxldGVIYW5kbGVyLCBsaWtlSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xuICAgICAgICB0aGlzLl9saWtlcyA9IGRhdGEubGlrZXM7XG4gICAgICAgIHRoaXMuX293bmVyID0gZGF0YS5vd25lci5faWQ7XG4gICAgICAgIHRoaXMuX215SUQgPSBteUlEO1xuICAgICAgICB0aGlzLl9jYXJkSUQgPSBkYXRhLl9pZDtcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVTZWxlY3RvciA9IHRlbXBsYXRlU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX3BvcHVwSGFuZGxlciA9IHBvcHVwSGFuZGxlcjtcbiAgICAgICAgdGhpcy5fZGVsZXRlSGFuZGxlciA9IGRlbGV0ZUhhbmRsZXI7XG4gICAgICAgIHRoaXMuX2xpa2VIYW5kbGVyID0gbGlrZUhhbmRsZXI7XG4gICAgfVxuXG4gICAgX2dldFRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKVxuICAgICAgICAgICAgLmNvbnRlbnRcbiAgICAgICAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHJldHVybiBjYXJkRWxlbWVudDtcbiAgICB9XG5cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoY2FyZEltYWdlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19yZW1vdmUtYnV0dG9uJyk7XG4gICAgICAgICAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbGlrZS1idXR0b24nKTtcbiAgICAgICAgICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlrZUhhbmRsZXIodGhpcy5fY2FyZElELCBldnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9wb3B1cEhhbmRsZXIodGhpcy5fbmFtZSwgdGhpcy5fbGluaykpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIHJlbmRlckNhcmQoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdDYXJkSW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpO1xuICAgICAgICBuZXdDYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgICAgICAgbmV3Q2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKG5ld0NhcmRJbWFnZSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX3RleHQnKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2xpa2UtY291bnRlcicpLnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5fbXlJRCA9PT0gdGhpcy5fb3duZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxldGVIYW5kbGVyKHRoaXMuX2NhcmRJRCwgZXZ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQnV0dG9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIGlmICgodGhpcy5fbGlrZXMuc29tZShlbGVtID0+IGVsZW0uX2lkID09PSB0aGlzLl9teUlEKSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fbGlrZS1idXR0b25fcHJlc3NlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIHNlY3Rpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IGl0ZW1zO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VjdGlvblNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICBcbiAgICByZW5kZXJJdGVtcygpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgXG4gICAgYWRkSXRlbShlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UtYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7XG4gICAgICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZSk7XG4gICAgICAgIHRoaXMuX21vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9vcGVuZWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fbW9kYWwuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbmVkJyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9tb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9vcGVuZWQnKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG5cbiAgICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcblxuICAgIG9wZW4obmFtZSwgbGluaykge1xuICAgICAgICBzdXBlci5vcGVuKCk7XG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZScpO1xuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnICsgbGluayk7XG4gICAgICAgIGltYWdlLmFsdCA9ICfRhNC+0YLQviAnICsgbmFtZTtcbiAgICAgICAgdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJ0aXRsZScpLnRleHRDb250ZW50ID0gbmFtZTtcblxuICAgIH1cblxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBzdWJtaXRIYW5kbGVyKSB7XG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbiA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc3VibWl0Jyk7XG4gICAgICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm1zJyk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBzdWJtaXRIYW5kbGVyO1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9fZm9ybScpKTtcbiAgICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcldpdGhEYXRhID0gdGhpcy5fc3VibWl0SGFuZGxlcldpdGhEYXRhLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xuICAgICAgICBjb25zdCBpbnB1dFZhbHVlc09iaiA9IHt9O1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGlucHV0VmFsdWVzT2JqW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZXNPYmo7XG4gICAgfVxuXG4gICAgX3N1Ym1pdEhhbmRsZXJXaXRoRGF0YSgpIHtcbiAgICAgICAgdGhpcy5faW5wdXRWYWx1ZXMgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyKHRoaXMuX2lucHV0VmFsdWVzKTtcbiAgICB9XG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5fc3VibWl0SGFuZGxlcldpdGhEYXRhKTtcblxuXG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBzdXBlci5jbG9zZSgpO1xuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KClcblxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGJpb1NlbGVjdG9yLCBhdmF0YXJTZWxlY3RvciB9KSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2JpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYmlvU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcblxuXG4gICAgfVxuICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IHt9O1xuICAgICAgICB1c2VyRGF0YS5uYW1lID0gdGhpcy5fbmFtZS50ZXh0Q29udGVudDtcbiAgICAgICAgdXNlckRhdGEuYmlvID0gdGhpcy5fYmlvLnRleHRDb250ZW50O1xuICAgICAgICByZXR1cm4gdXNlckRhdGE7XG4gICAgfVxuICAgIHNldFVzZXJJbmZvKHsgbmFtZSwgYmlvIH0pIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpbykge1xuICAgICAgICB0aGlzLl9iaW8udGV4dENvbnRlbnQgPSBiaW87XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0QXZhdGFyKGF2YXRhcikge1xuICAgICAgICBpZiAoYXZhdGFyKSB7XG4gICAgICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XG4gICAgICAgIH1cbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJVUkwsIGNhcmRzVVJMLCB0b2tlbiB9KSB7XG4gICAgICAgIHRoaXMuX3VzZXJVUkwgPSB1c2VyVVJMO1xuICAgICAgICB0aGlzLl9jYXJkc1VSTCA9IGNhcmRzVVJMO1xuICAgICAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xuICAgIH1cbiAgICBnZXRVc2VyRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMuX3VzZXJVUkwsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQtNCw0L3QvdGL0YUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgLy8gLmNhdGNoKCgpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdlcnJvciBkb3dubG9hZGluZyB1c2VyIGRhdGEnKTtcbiAgICAgICAgLy8gfSlcbiAgICB9XG5cbiAgICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9jYXJkc1VSTCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LAg0YHQstGP0LfQuCDRgSDRgdC10YDQstC10YDQvtC8ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgdXBsb2FkVXNlclByb2ZpbGVEYXRhKG5hbWUsIGFib3V0KSB7XG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl91c2VyVVJMLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFib3V0OiBhYm91dFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LTQsNC90L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdCwINGB0LXRgNCy0LXRgCAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICB9XG4gICAgYWRkQ2FyZChuYW1lLCBsaW5rKSB7XG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9jYXJkc1VSTCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IGxpbmtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INC60LDRgNGC0L7Rh9C60Lgg0L3QsCDRgdC10YDQstC10YAgJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGVsZXRlQ2FyZChpZCkge1xuICAgICAgICBjb25zdCBjYXJkRGVsZXRlVVJMID0gKHRoaXMuX2NhcmRzVVJMICsgYC8ke2lkfWApO1xuICAgICAgICByZXR1cm4gZmV0Y2goY2FyZERlbGV0ZVVSTCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCfQntGI0LjQsdC60LAg0YPQtNCw0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICB9XG4gICAgbGlrZUNhcmQoaWQpIHtcbiAgICAgICAgY29uc3QgY2FyZExpa2VVUkwgPSAodGhpcy5fY2FyZHNVUkwgKyBgL2xpa2VzLyR7aWR9YCk7XG4gICAgICAgIHJldHVybiBmZXRjaChjYXJkTGlrZVVSTCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCfQntGI0LjQsdC60LAg0YHQstGP0LfQuCDRgSDRgdC10YDQstC10YDQvtC8Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgIH1cbiAgICBkaXNsaWtlQ2FyZChpZCkge1xuICAgICAgICBjb25zdCBjYXJkTGlrZVVSTCA9ICh0aGlzLl9jYXJkc1VSTCArIGAvbGlrZXMvJHtpZH1gKTtcbiAgICAgICAgcmV0dXJuIGZldGNoKGNhcmRMaWtlVVJMLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX3Rva2VuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ9Ce0YjQuNCx0LrQsCDRgdCy0Y/Qt9C4INGBINGB0LXRgNCy0LXRgNC+0LwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgIH1cbiAgICBhdmF0YXJVcGxvYWQodXJsKSB7XG4gICAgICAgIHJldHVybiBmZXRjaCgodGhpcy5fdXNlclVSTCArIGAvYXZhdGFyYCksIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IHVybC5saW5rLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgn0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LDQstCw0YLQsNGA0LAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgYXZhdGFyU3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJtaXRfYXZhdGFyJyk7XHJcbmV4cG9ydCBjb25zdCBuZXdDYXJkU3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJtaXRfbmV3LWVsZW1lbnQnKTtcclxuZXhwb3J0IGNvbnN0IGVkaXRTdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3N1Ym1pdF9lZGl0Jyk7XHJcbmNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX21lc3NhZ2UnKTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nLCBidXR0b24pIHtcclxuICAgIGlmKGlzTG9hZGluZykge1xyXG4gICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICfQodC+0YXRgNCw0L3QtdC90LjQtS4uLidcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC40YLRjCdcclxuICAgIH1cclxufVxyXG5leHBvcnQge3JlbmRlckxvYWRpbmd9O1xyXG5cclxuZnVuY3Rpb24gc2hvd0Vycm9yTWVzc2FnZSh0ZXh0KSB7XHJcbiAgICBtZXNzYWdlLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIG1lc3NhZ2UucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb3B1cF9vcGVuZWQnKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIG1lc3NhZ2UudGV4dENvbnRlbnQgPSAnJztcclxuICAgIH0sIDIwMDApO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgfSwgMjIwMCk7XHJcblxyXG59XHJcbmV4cG9ydCB7c2hvd0Vycm9yTWVzc2FnZX07IiwiaW1wb3J0ICcuLi9wYWdlcy9pbmRleC5jc3MnO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcbmltcG9ydCBDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMnO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSAnLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzJztcbmltcG9ydCBVc2VySW5mbyBmcm9tICcuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vY29tcG9uZW50cy9BcGkuanMnO1xuaW1wb3J0IHtuZXdDYXJkU3VibWl0QnV0dG9uLCBhdmF0YXJTdWJtaXRCdXR0b24sIGVkaXRTdWJtaXRCdXR0b24sIHJlbmRlckxvYWRpbmcsIHNob3dFcnJvck1lc3NhZ2V9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcblxuXG5jb25zdCB2YWxpZGF0aW9uQ29uZmlnID0ge1xuICAgIGZvcm1TZWxlY3RvcjogJy5wb3B1cF9fZm9ybXNfdHlwZV9pbnB1dCcsXG4gICAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9fZm9ybScsXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcucG9wdXBfX3N1Ym1pdCcsXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogJ3BvcHVwX19zdWJtaXRfZGlzYWJsZWQnLFxuICAgIGlucHV0RXJyb3JDbGFzczogJ3BvcHVwX19mb3JtX3R5cGVfZXJyb3InLFxuICAgIGVycm9yQ2xhc3M6ICdwb3B1cF9fZXJyb3JfdmlzaWJsZSdcbn07XG5cbmNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fcHJvZmlsZS1idXR0b24nKTtcbmNvbnN0IGFkZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19hZGQtYnV0dG9uJyk7XG5jb25zdCBwb3B1cEVkaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfdHlwZV9lZGl0Jyk7XG5jb25zdCBwb3B1cEVkaXRDb250YWluZXIgPSBwb3B1cEVkaXQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtcycpO1xuY29uc3QgdXNlckF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19hdmF0YXInKTtcblxuY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtX3R5cGVfbmFtZScpO1xuY29uc3QgYmlvSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm1fdHlwZV9iaW8nKTtcbmxldCB1c2VyRGF0YSA9IHt9O1xuXG5jb25zdCBhcGlDb25maWcgPSB7XG4gICAgdXNlclVSTDogJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtMTcvdXNlcnMvbWUnLFxuICAgIGNhcmRzVVJMOiAnaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC0xNy9jYXJkcycsXG4gICAgdG9rZW46ICc5YzVlZmE0Ny0zYWVlLTQwMGYtYjBiOC1hZWYxYTM1M2E5MzgnXG59XG5cbmNvbnN0IHVzZXJDb25maWcgPSBuZXcgVXNlckluZm8gKHtcbiAgICBuYW1lU2VsZWN0b3I6ICcucHJvZmlsZV9fbmFtZScsXG4gICAgYmlvU2VsZWN0b3I6ICcucHJvZmlsZV9fc3VidGl0bGUnLFxuICAgIGF2YXRhclNlbGVjdG9yOiAnLnByb2ZpbGVfX2F2YXRhcidcbn0pO1xuXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKCcucG9wdXBfdHlwZV9pbWFnZScpO1xuY29uc3QgZWRpdE1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF90eXBlX2VkaXQnLCBmb3JtRWRpdFN1Ym1pdEhhbmRsZXIpO1xuY29uc3QgbmV3Q2FyZE1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF90eXBlX25ldy1lbGVtZW50JywgZm9ybU5ld0NhcmRTdWJtaXRIYW5kbGVyKTtcbmNvbnN0IGNvbmZpcm1Nb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcucG9wdXBfdHlwZV9jb25maXJtJywgZm9ybUNvbmZpcm1TdWJtaXRIYW5kbGVyKTtcbmNvbnN0IGF2YXRhck1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF90eXBlX2F2YXRhcicsIGZvcm1BdmF0YXJTdWJtaXRIYW5kbGVyKTtcbmNvbnN0IGFwaSA9IG5ldyBBcGkoYXBpQ29uZmlnKTtcbmNvbnN0IHBvcHVwRm9ybVNlbGVjdG9yID0gcG9wdXBFZGl0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xuY29uc3QgcGxhY2UgPSAnI3BsYWNlJztcblxuZnVuY3Rpb24gY3JlYXRlQ2FyZChpdGVtKSB7XG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGl0ZW0sIHBsYWNlLCB1c2VyRGF0YS5faWQsIGhhbmRsZVByZXZpZXdQaWN0dXJlLCBkZWxldGVDYXJkSGFuZGxlciwgbGlrZUhhbmRsZXIpO1xuICAgIHJldHVybiBjYXJkO1xufTsgXG5cbmZ1bmN0aW9uIGhhbmRsZVByZXZpZXdQaWN0dXJlKG5hbWUsIGxpbmspIHtcbiAgICBpbWFnZVBvcHVwLm9wZW4obmFtZSwgbGluayk7XG59XG5cbmZ1bmN0aW9uIG9wZW5FZGl0UHJvZmlsZU1vZGFsKCkge1xuICAgIGVkaXRNb2RhbC5vcGVuKCk7XG4gICAgZm9ybU5ld0NhcmRTdWJtaXRWYWxpZGF0b3IuY2xlYXJFcnJvcnMoKTtcbiAgICBjb25zdCB1c2VyRGF0YSA9IHVzZXJDb25maWcuZ2V0VXNlckluZm8oKTtcbiAgICBuYW1lSW5wdXQudmFsdWUgPSB1c2VyRGF0YS5uYW1lO1xuICAgIGJpb0lucHV0LnZhbHVlID0gdXNlckRhdGEuYmlvO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHBvcHVwRm9ybVNlbGVjdG9yLmZvY3VzKCk7XG4gICAgfSwgMTAwKTtcbn1cblxuY29uc3QgZm9ybUF2YXRhclN1Ym1pdFZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGF2YXRhck1vZGFsLl9mb3JtKTtcbmZvcm1BdmF0YXJTdWJtaXRWYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuY29uc3QgZm9ybUVkaXRTdWJtaXRWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBuZXdDYXJkTW9kYWwuX2Zvcm0pO1xuZm9ybUVkaXRTdWJtaXRWYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuY29uc3QgZm9ybU5ld0NhcmRTdWJtaXRWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBwb3B1cEVkaXRDb250YWluZXIpO1xuZm9ybU5ld0NhcmRTdWJtaXRWYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5sZXQgY2FyZHNHcmlkID0ge307XG5jb25zdCB1c2VyRnJvbVNlcnZlciA9IGFwaS5nZXRVc2VyRGF0YSgpO1xuY29uc3QgY2FyZHNGcm9tU2VydmVyID0gYXBpLmdldEluaXRpYWxDYXJkcygpO1xuXG5jb25zdCBkYXRhRG93bmxvYWQgPSBbdXNlckZyb21TZXJ2ZXIsIGNhcmRzRnJvbVNlcnZlcl07XG5Qcm9taXNlLmFsbChkYXRhRG93bmxvYWQpXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgdXNlckRhdGEgPSBkYXRhWzBdO1xuICAgICAgICBjb25zdCBjYXJkc0RhdGEgPSBkYXRhWzFdO1xuICAgICAgICB1c2VyQ29uZmlnLnNldFVzZXJJbmZvKHsgXCJuYW1lXCI6IHVzZXJEYXRhLm5hbWUsIFwiYmlvXCI6IHVzZXJEYXRhLmFib3V0IH0pO1xuICAgICAgICB1c2VyQXZhdGFyLnNyYyA9IHVzZXJEYXRhLmF2YXRhcjtcbiAgICAgICAgY2FyZHNHcmlkID0gbmV3IFNlY3Rpb24oe1xuICAgICAgICAgICAgaXRlbXM6IGNhcmRzRGF0YSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChpdGVtKS5yZW5kZXJDYXJkKGl0ZW0pOyBcbiAgICAgICAgICAgICAgICBjYXJkc0dyaWQuYWRkSXRlbShjYXJkRWxlbWVudCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAnLmVsZW1lbnRzJyk7XG4gICAgICAgIGNhcmRzR3JpZC5yZW5kZXJJdGVtcygpO1xuICAgICAgICBcbiAgICAgICAgaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICBlZGl0TW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgbmV3Q2FyZE1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIGNvbmZpcm1Nb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICBhdmF0YXJNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICBcbiAgICAgICAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9wZW5FZGl0UHJvZmlsZU1vZGFsKTtcbiAgICAgICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobmV3Q2FyZE1vZGFsKTtcbiAgICAgICAgICAgIG5ld0NhcmRNb2RhbC5zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgbmV3Q2FyZE1vZGFsLnN1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHZhbGlkYXRpb25Db25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICAgICAgICBuZXdDYXJkTW9kYWwub3BlbigpXG4gICAgICAgICAgICBmb3JtRWRpdFN1Ym1pdFZhbGlkYXRvci5jbGVhckVycm9ycygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdXNlckF2YXRhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGF2YXRhck1vZGFsLnN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBhdmF0YXJNb2RhbC5zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh2YWxpZGF0aW9uQ29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgICAgICAgYXZhdGFyTW9kYWwub3BlbigpXG4gICAgICAgICAgICBmb3JtQXZhdGFyU3VibWl0VmFsaWRhdG9yLmNsZWFyRXJyb3JzKCk7XG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShlcnIpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xuXG5mdW5jdGlvbiBmb3JtQXZhdGFyU3VibWl0SGFuZGxlcihkYXRhKSB7XG4gICAgcmVuZGVyTG9hZGluZyh0cnVlLCBhdmF0YXJTdWJtaXRCdXR0b24pO1xuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIGFwaS5hdmF0YXJVcGxvYWQoZGF0YSlcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgdXNlckNvbmZpZy5zZXRBdmF0YXIocmVzLmF2YXRhcik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShlcnIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyTG9hZGluZyhmYWxzZSwgYXZhdGFyU3VibWl0QnV0dG9uKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSlcblxufVxuXG5mdW5jdGlvbiBkZWxldGVDYXJkSGFuZGxlcihpZCwgZXZ0KSB7XG4gICAgY29uZmlybU1vZGFsLmNhcmRUb0RlbGV0ZUlEID0gaWQ7XG4gICAgY29uZmlybU1vZGFsLmNhcmRUb0RlbGV0ZUVsZW1lbnQgPSBldnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgY29uZmlybU1vZGFsLm9wZW4oKTtcbn1cblxuZnVuY3Rpb24gZm9ybUNvbmZpcm1TdWJtaXRIYW5kbGVyKCkge1xuICAgIGFwaS5kZWxldGVDYXJkKGNvbmZpcm1Nb2RhbC5jYXJkVG9EZWxldGVJRClcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgICBjb25maXJtTW9kYWwuY2FyZFRvRGVsZXRlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlKGVycik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pXG5cbn1cblxuXG5mdW5jdGlvbiBsaWtlSGFuZGxlcihpZCwgZXZ0KSB7XG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdlbGVtZW50X19saWtlLWJ1dHRvbl9wcmVzc2VkJykpIHtcbiAgICAgICAgYXBpLmRpc2xpa2VDYXJkKGlkKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGV2dC50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50ID0gcmVzLmxpa2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2VsZW1lbnRfX2xpa2UtYnV0dG9uX3ByZXNzZWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoZXJyKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcGkubGlrZUNhcmQoaWQpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgZXZ0LnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQgPSByZXMubGlrZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fbGlrZS1idXR0b25fcHJlc3NlZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShlcnIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9ybUVkaXRTdWJtaXRIYW5kbGVyKGRhdGEpIHtcbiAgICByZW5kZXJMb2FkaW5nKHRydWUsIGVkaXRTdWJtaXRCdXR0b24pXG4gICAgYXBpLnVwbG9hZFVzZXJQcm9maWxlRGF0YShkYXRhLm5hbWUsIGRhdGEuYmlvKVxuICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgICAgdXNlckNvbmZpZy5zZXRVc2VySW5mbyh7IG5hbWU6IHJlcy5uYW1lLCBiaW86IHJlcy5hYm91dCB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoZXJyKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgIHJlbmRlckxvYWRpbmcoZmFsc2UsIGVkaXRTdWJtaXRCdXR0b24pXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pXG59XG5cbmZ1bmN0aW9uIGZvcm1OZXdDYXJkU3VibWl0SGFuZGxlcihkYXRhKSB7XG4gICAgcmVuZGVyTG9hZGluZyh0cnVlLCBuZXdDYXJkU3VibWl0QnV0dG9uKVxuICAgIGFwaS5hZGRDYXJkKGRhdGEucGxhY2UsIGRhdGEubGluaylcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChyZXMpLnJlbmRlckNhcmQocmVzKTsgXG4gICAgICAgICAgICBjYXJkc0dyaWQuYWRkSXRlbShjYXJkRWxlbWVudCk7IFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShlcnIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyTG9hZGluZyhmYWxzZSwgbmV3Q2FyZFN1Ym1pdEJ1dHRvbilcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSlcbn1cblxuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=